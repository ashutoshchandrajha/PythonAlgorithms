class Empty(Exception):
    pass

class LinkedQueue():
    #FIFO Queue implementation using a singly linked list

    #Nested Node class
    class _Node():
        #Non public class for storing a singly linked Node
        __slots__ = 'element','next'            #streamline memory usage
        def __init__(self,element,next):
            self._element = element
            self._next = next

    #Queue methods
    def __init__(self):
        #Create empty Queue
        self._head = None
        self._tail = None
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return len(self._size)==0

    def first(self):
        if self.is_empty():
            raise Empty('Queue is empty')
        return self._head._element

    def dequeue(self):
        if self.is_empty():
            raise Empty('Queue is empty')
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        if self.is_empty():                 #special case as Queue is empty
            self._tail = None
        return answer

    def enqueue(self,e):
        newest = self._Node(e,None)         #Node will be new tail Node
        if self.is_empty():
            self._head = newest             #previously empty
        else:
            self._tail._next = newest
        self._tail = newest                 #Update reference to the tail node
        self._size += 1


class Tree():
    #Abstract base class representing a tree structure

    #nested position class
    class Position():
        #abstraction representing location of single element

        def element(self):
            #return element stored at this position
            raise NotImplementedError('must be implemeneted by subclass')

        def __eq__(self, other):
            #return true position represents same location
            raise NotImplementedError('must be implemeneted by subclass')

        def __ne__(self, other):
            #return true if other does not represent the same location
            return not (self==other)                #opposite of __eq__

    #abstract methods that concrete subclass must support

    def root(self):
        #return position representing the tree's root or none if empty
        raise NotImplementedError('must be implemeneted by subclass')

    def parent(self,p):
        #return position representing p's parent or None if p is root
        raise NotImplementedError('must be implemeneted by subclass')

    def num_children(self,p):
        #return number of children that position p has
        raise NotImplementedError('must be implemeneted by subclass')

    def children(self,p):
        #generate an iteration of positions representing p's children
        raise NotImplementedError('must be implemeneted by subclass')

    def __len__(self):
        #return total number of elements in the tree
        raise NotImplementedError('must be implemeneted by subclass')

    #concrete methods implemented in this class
    def is_root(self,p):
        #return true if position P represents root
        return self.root()==p

    def is_leaf(self,p):
        #return true if p does not have any children
        return self.num_children(p)==0

    def is_empty(self):
        #return true if the tree is empty
        return len(self)

    def depth(self,p):
        #return number of levels separating Position P from the root
        if self.is_root(p):
            return 0
        else:
            return 1+self.depth(self.parent(p))

    def _height1(self):         #O(n^2) worst case time
        if self.is_leaf():
            return 0
        else:
            return max(self.depth(p) for p in self.positions() if self.is_leaf(p))

    def _height2(self,p):       #linear running time
        #return height of subtree rooted at Position p
        if self.is_leaf(p):
            return 0
        else:
            return 1+max(self._height2(c) for c in self.children(p))

    def height(self,p=None):
        if p == None:
            p = self.root()
        return self._height2(p)

    def __iter__(self):
        #Generate an iteration of tree's elements
        for p in self.positions():              #use same order as positions
            yield p.element()                   #but yield each element

    def preOrder(self):
        #generate preorder iteration of positions in the tree
        if not self.is_empty():
            for p in self._subtree_preorder(self.root()):   #start recursion
                yield p

    def _subtree_preorder(self,p):
        #generate preorder iteration of positions in subtree root at p
        yield p                         #visit p before its subtrees
        for c in self.children(p):
            for other in self._subtree_preorder(c): #do preorder of c's subtree
                yield other             #yielding each to our caller

    def postOrder(self):
        #Generate postorder iteration of positions in the tree
        if not self.is_empty():
            for p in self._subtree_postorder(self.root()):
                yield p

    def _subtree_postorder(self,p):
        for c in self.children(p):
            for other in self._subtree_postorder(c):
                yield other
        yield p                         #visit p after its subtrees

    def positions(self):
        #Generate iteration of tree's positions
        return self.preOrder()          #return entire preorder iteration

    def breadthFirst(self):
        if not self.is_empty():
            fringe = LinkedQueue()          #known positions not yet yielded
            fringe.enqueue(self.root())     #starting with root
            while not fringe.is_empty():
                p = fringe.dequeue()        #remove from front of queue
                yield p                     #report this position
                for c in self.children(p):
                    fringe.enqueue(c)       #add children back of queue


class BinaryTree(Tree):
    #Abstract base class representing a binary tree structure

    def left(self,p):
        raise NotImplementedError('must be implemeneted by subclass')

    def right(self,p):
        raise NotImplementedError('must be implemeneted by subclass')

    #concrete methods
    def sibling(self,p):
        parent = self.parent(p)
        if parent is None:
            return None
        else:
            if p==self.left(parent):
                return self.right(parent)
            else:
                return self.left(parent)

    def children(self,p):
        #generate an iteration of positions representing p's children
        if self.left(p) is not None:
            yield self.left(p)
        if self.right(p) is not None:
            yield self.right(p)

    def inOrder(self):
        #Generate inorder iteration of positions in Tree class
        if not self.is_empty():
            for p in self._subtree_inorder(self.root()):
                yield p

    def _subtree_inorder(self,p):
        if self.left(p) is not None:        #if left child exists, traverse its subtree
            for other in self._subtree_inorder(self.left(p)):
                yield other
            yield p
            if self.right(p) is not None:   #if right child exists, traverse its subtree
                for other in self._subtree_inorder(self.right()):
                    yield other

    #override inherited version to make inorder the default
    def positions(self):
        return self.inOrder()               #make inorder the default


class LinkedBinaryTree(BinaryTree):
    #Linked representation of a binary tree

    class _Node():
        __slots__ = '_element','_parent','_left','_right'
        def __init__(self,element,parent=None,left=None,right=None):
            self._element=element
            self._parent=parent
            self._left=left
            self._right=right

    class Position(BinaryTree.Position):
        #abstraction representing location of a single element

        def __init__(self,container,node):
            #should not be invoked by user
            self._container=container
            self._node=node

        def element(self):
            #return element stored at this position
            return self._node._element

        def __eq__(self, other):
            #return true if the position representing same location
            return type(other) is type(self) and other._node is self._node

    def _validate(self,p):
        #return associated node if position is valid
        if not isinstance(p,self.Position):
            raise TypeError('p must be proper Position type')
        if p._container is not self:
            raise ValueError('p does not belong to this container')
        if p._node._parent is p._node:              #convention for deprecated nodes
            raise ValueError('p is no longer valid')
        return p._node

    def _make_position(self,node):
        #return position instance for given node
        return self.Position(self, node) if node is not None else None

    #------Binary tree constructor
    def __init__(self):
        #create initial empty binary tree
        self._root = None
        self._size=0

    #------Public accessors
    def __len__(self):
        return self._size

    def root(self):
        return self._make_position(self._root)

    def parent(self,p):
        node = self._validate(p)
        return self._make_position(node._parent)

    def left(self,p):
        node = self._validate(p)
        return self._make_position(node._parent)

    def right(self,p):
        node = self._validate()
        return self._make_position(node._parent)

    def num_children(self,p):
        #return number of children of position P
        node = self._validate(p)
        count = 0
        if node._left is not None:
            count+=1
        if node._right is not None:
            count+=1
        return count

    def _add_root(self,e):
        if self.root is not None:
            raise ValueError('Root Exists')
        self._size = 1
        self._root= self._Node(e)
        return self._make_position(self._root)

    def _add_left(self,p,e):
        node = self._validate(p)
        if node._left is not None:
            raise ValueError('Left child already exists')
        self._size+=1
        node._left=self._Node(e,node)
        return self._make_position(node._left)

    def _add_right(self,p,e):
        node=self._validate(p)
        if node._right is not None:
            raise ValueError('Right child already exists')
        self._size+=1
        node._right=self._Node(e,node)
        return self._make_position(node._right)

    def _replace(self,p,e):
        node=self._validate(p)
        old = node._element
        node._element=e
        return old

    def _delete(self,p):
        #delete node at position p and replace it with child
        node = self._validate(p)
        if self.num_children(p)==2:
            raise ValueError('p has two children')
        child = node._left if node._left else node._right   #might be None
        if child is not None:
            child.parent = node._parent     #child's grandfather becomes parent
        if node is self._root:
            self._root= child               #child becomes root
        else:
            parent = node._parent
            if node is parent._left:
                parent._left = child
            else:
                parent._right = child
        self._size-=1
        node._parent=node                   #convention for deprecated node
        return node._element

    def _attach(self,p,t1,t2):
        #attach trees t1 and t2 as left and right of external p
        node=self._validate(p)
        if not self.is_leaf(p):
            raise ValueError('position must be leaf')
        if not type(self) is type(t1) is type(t2):  #all 3 trees must be same type
            raise TypeError('Tree types must match')
        self._size+=len(t1)+len(t2)
        if not t1.is_empty():           #attached t1 as left subtree of node
            t1._root._parent = node
            node._left=t1._root
            t1._root=None               #set instance t1 to empty
            t1._size=0
        if not t2.is_empty():
            t2._root._parent=node
            node._right=t2._root
            t2._root=None               #set t2 instance to empty
            t2._size=0
            
