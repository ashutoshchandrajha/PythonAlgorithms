from collections import MutableMapping

class MapBase(MutableMapping):
    #abstract base class

    class _Item:
        # Lightweight composite to store key-value pairs as map items

        __slots__ = '_key','_value'
        def __init__(self,k,v):
            self._key=k
            self._value=v

        def __eq__(self, other):
            return self._key == other._key

        def __ne__(self, other):
            return not (self == other)

        def __lt__(self, other):
            return self._key < other._key

class UnsortedTableMap(MapBase):
    # Map implementation usnig an unordered list

    def __init__(self):
        #create an empty map
        self._table = []                #list of _Item

    def __getitem__(self, k):
        #return value associated with key k
        for item in self._table:
            if k == item._key:
                return item._value
        raise KeyError('Key Error: '+repr(k))

    def __setitem__(self, key, value):
        #assign value to key, overwrite if existing
        for item in self._table:
            if k == item._key:
                item._value = value
                return
            #did not find match
        self._table.append(self._Item(key,value))

    def __delitem__(self, k):
        for j in range(len(self._table)):
            if k == self._table[j]._key:
                self._table.pop(j)
                return
        #did not find match for the key
        raise KeyError('Key Error: '+ repr(k))

    def __len__(self):
        return len(self._table)

    def __iter__(self):
        for item in self._table:
            yield item._key
