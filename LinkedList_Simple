class Empty(Exception):
    pass

class LinkedList():

    class _Node():
        def __init__(self,element,next):
            self._element=element
            self._next=next

    def __init__(self):
        self._head=None
        self._size=0

    def __len__(self):
        return self._size

    def is_empty(self):
        return self._size==0

    def _add_first(self,e):
        self._head=self._Node(e,self._head)
        self._size+=1

    def _add_last(self,e):
        pos= self._head
        while pos._next!=None:
            pos=pos._next
        newnode=self._Node(e,pos._next)
        pos._next=newnode
        self._size+=1

    def printList(self):
        pos=self._head
        while pos!=None:
            print(pos._element)
            pos=pos._next

    def _delete_element(self,k):
        if self.is_empty():
            raise Empty('List is empty')
        if k>self._size:
            raise ValueError('List index out of bound')
        pos=self._head
        if k==1:
            answer = self._head._element
            temp=self._head
            self._head=self._head._next
            temp._element=None
            temp._next=None
            return answer
        index=1
        while pos!=None and index<k-1:
            pos=pos._next
            index+=1
        answer=pos._next._element
        temp=pos._next
        pos._next=pos._next._next
        temp._next=None
        temp._element=None
        return answer

    def reverse_list_iterative(self):
        temp = self._head
        prev = None
        while temp!=None:
            next=temp._next
            temp._next=prev
            prev=temp
            temp=next
        self._head=prev

    #copied from Internet
    def _reverseUtil(self, curr, prev):
        # If last node mark it head
        if curr._next is None :
            self._head = curr
            # Update next to prev node
            curr._next = prev
            return
        # Save curr.next node for recursive call
        next = curr._next
        # And update next
        curr._next = prev
        self._reverseUtil(next, curr)

    # This function mainly calls reverseUtil()
    # with previous as None
    def reverse_list_recursive(self):
        if self._head is None:
            return
        self._reverseUtil(self._head, None)



if __name__=="__main__":
    l = LinkedList()
    l._add_first(8)
    l._add_last(6)
    l._add_first(2)
    l._add_first(3)
    l._add_last(9)
    l._add_first(4)
    l._add_last(0)
    l._add_first(11)
    l._add_last(77)
    l._add_first(68)
    s=l._delete_element(7)
    l.printList()
    l.reverse_list_recursive()
    print("Reversed List")
    l.printList()
    #print("deleted element = ",s)
