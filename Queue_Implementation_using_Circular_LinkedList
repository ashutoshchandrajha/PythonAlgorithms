class Empty(Exception):
    pass

class CircularQueue():
    #Queue implementation using Circular linked list
    class _Node():
        __slots__ = '_element','_next'
        def __init__(self,element,next):
            self._element=element
            self._next = next

    def __init__(self):
        #Create an empty queue
        self._tail = None
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return self._size==0

    def first(self):
        if self.is_empty():
            raise Empty('Queue is empty')
        head = self._tail._next
        return head._element

    def dequeue(self):
        if self.is_empty():
            return Empty('Queue is empty')
        oldhead = self._tail._next
        if self._size==1:               #removing only element
            self._tail=None             #queue becomes empty
        else:
            self._tail._next = oldhead._next    #bypass the old head
        self._size-=1
        return oldhead._element

    def enqueue(self,e):
        #add element to the back of the queue
        newest = self._Node(e,None)     #node will be tail node
        if self.is_empty():
            newest._next = newest       #initialize circularly
        else:
            newest._next = self._tail._next     #new node points to head
            self._tail._next = newest           #old tail points
            self._size += 1

    def rotate(self):
        #rotate front element to the back of the queue
        if self._size > 0:
            self._tail = self._tail._next       #old tail becomes new tail
