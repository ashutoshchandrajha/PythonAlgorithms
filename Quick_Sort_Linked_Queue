class Empty(Exception):
    pass

class LinkedQueue():
    class Node():
        __slots__ = 'element','next'
        def __init__(self,element,next):
            self.element=element
            self.next=next

    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def __len__(self):
        return self.size

    def is_empty(self):
        return self.size==0

    def enqueue(self,e):
        newnode=self.Node(e,None)
        if self.is_empty():
            self.head=newnode
        else:
            self.tail.next=newnode
        self.tail=newnode
        self.size+=1

    def dequeue(self):
        if self.is_empty():
            raise Empty('Queue is empty')
        answer = self.head.element
        self.head = self.head.next
        self.size-=1
        if self.is_empty():
            self.tail=None
        return answer

    def first(self):
        if self.is_empty():
            raise Empty('Queue is empty')
        return self.head.element

    def __iter__(self):
        temp=self.head
        while temp is not None:
            yield temp.element
            temp=temp.next

s = LinkedQueue()
s.enqueue(4)
s.enqueue(6)
s.enqueue(3)
s.enqueue(9)
s.enqueue(1)
s.enqueue(2)
s.enqueue(5)
s.enqueue(8)
s.enqueue(7)

for i in s:
    print (i)

def quick_sort(s):
    if len(s)<2:
        return
    pivot = s.first()
    l = LinkedQueue()
    e = LinkedQueue()
    g = LinkedQueue()
    while not s.is_empty():
        if s.first()<pivot:
            l.enqueue(s.dequeue())
        elif s.first()==pivot:
            e.enqueue(s.dequeue())
        else:
            g.enqueue(s.dequeue())

    quick_sort(l)
    quick_sort(g)

    while not l.is_empty():
        s.enqueue(l.dequeue())
    while not e.is_empty():
        s.enqueue(e.dequeue())
    while not g.is_empty():
        s.enqueue(g.dequeue())

print ("Sorted queue")
quick_sort(s)
for i in s:
    print (i)
