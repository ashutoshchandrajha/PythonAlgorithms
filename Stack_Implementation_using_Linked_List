class Empty(Exception):
    pass

class LinkedStack():
    #LIFO Stack implementation using a singly linked list as storage

    #  Nested _Node Class
    class _Node():
        #Non public class for storing a singly linked list
        __slots__ = '_element','_next'              #streamline memory usage

        def __init__(self,element, next):
            self._element = element
            self._next = next

    # Stack methods
    def __init__(self):
        #Create an empty stack
        self._head = None
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return self._size==0

    def push(self,e):
        #add element e to the top of the stack
        self._head= self._Node(e,self._head)        #create and link a new node
        self._size += 1

    def top(self):
        if self.is_empty():
            raise Empty('Stack is empty')
        return self._head._element

    def pop(self):
        if self.is_empty():
            raise Empty('Stack is empty')
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        return answer
