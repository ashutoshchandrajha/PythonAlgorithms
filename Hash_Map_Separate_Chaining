from random import randrange
from collections import MutableMapping

class MapBase(MutableMapping):
    #abstract base class

    class _Item:
        # Lightweight composite to store key-value pairs as map items

        __slots__ = '_key','_value'
        def __init__(self,k,v):
            self._key=k
            self._value=v

        def __eq__(self, other):
            return self._key == other._key

        def __ne__(self, other):
            return not (self == other)

        def __lt__(self, other):
            return self._key < other._key

class UnsortedTableMap(MapBase):
    # Map implementation usnig an unordered list

    def __init__(self):
        #create an empty map
        self._table = []                #list of _Item

    def __getitem__(self, k):
        #return value associated with key k
        for item in self._table:
            if k == item._key:
                return item._value
        raise KeyError('Key Error: '+repr(k))

    def __setitem__(self, key, value):
        #assign value to key, overwrite if existing
        for item in self._table:
            if k == item._key:
                item._value = value
                return
            #did not find match
        self._table.append(self._Item(key,value))

    def __delitem__(self, k):
        for j in range(len(self._table)):
            if k == self._table[j]._key:
                self._table.pop(j)
                return
        #did not find match for the key
        raise KeyError('Key Error: '+ repr(k))

    def __len__(self):
        return len(self._table)

    def __iter__(self):
        for item in self._table:
            yield item._key


def HashMapBase(MapBase):
    # abstract base class for map using hash-table with MAD compression

    def __init__(self,cap=11, p = 109345121):
        #create an empty hash table map
        self._table = cap * [ None ]
        self._n = 0
        self._prime = p                     #prime for MAD compression
        self._scale = 1 + randrange(p-1)    #scale from 1 to p-1 fro MAD
        self._shift = randrange(p)          #scale from 0 to p-1 for MAD

    def _hash_function(self,k):
        return (hash(k)*self._scale + self._shift) % self._prime % len(self._table)

    def __len__(self):
        return self._n

    def __getitem__(self,k):
        j = self._hash_function(k)
        return self._bucket_getitem(j,k)    #may raise key error

    def __setitem__(self,k,v):
        j = self._hash_function(k)
        self._bucket_setitem(j,k,v)
        if self._n > len(self._table) //2:  #keep load factor <= 0.5
            self._resize(2 * len(self._table) - 1)      #number 2^x - 1 is often prime

    def __delitem__(self,k):
        j = self._hash_function(k)
        self._bucket_delitem(j,k)           #may raise keyError
        self._n -= 1

    def _resize(self,c):                    #resize bucket array to capacity c
        old = list(self.items())            #use iteration to record existing items
        self._table = c * [None]            #then reset table to desired capacity
        self._n = 0                         #n recomputed during subsequent adds
        for (k,v) in old:
            self[k] = v                     #reinsert old key-value pair

def ChainHashMap(HashMapBase):
    #Hash map implementation with separate chaining for collision resolution

    def _bucket_getitem(self,j,k,v):
        bucket = self._table[j]
        if bucket is None:
            raise KeyError('Key Error: ' + repr(k))
        return bucket[k]

    def _bucket_setitem(self,j,k,v):
        if self._table[j] is None:
            self._table = UnsortedTableMap()    #bucket is new to the table
        oldsize = len(self._table[j])
        self._table[j][k] = v
        if len(self._table[j]) > oldsize:       #key was new to the table
            self._n += 1

    def _bucket_delitem(self,j,k):
        bucket = self._table[j]
        if bucket is None:
            raise KeyError('Key Error: '+ repr(k))
        del bucket[k]

    def __iter__(self):
        for bucket in self._table:
            if bucket is not None:              #a non empty slot
                for key in bucket:
                    yield key
                  
