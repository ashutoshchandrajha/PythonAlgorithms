class Empty(Exception):
    pass

class LinkedQueue():
    #FIFO Queue implementation using a singly linked list

    #Nested Node class
    class _Node():
        #Non public class for storing a singly linked Node
        __slots__ = 'element','next'            #streamline memory usage
        def __init__(self,element,next):
            self._element = element
            self._next = next

    #Queue methods
    def __init__(self):
        #Create empty Queue
        self._head = None
        self._tail = None
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return len(self._size)==0

    def first(self):
        if self.is_empty():
            raise Empty('Queue is empty')
        return self._head._element

    def dequeue(self):
        if self.is_empty():
            raise Empty('Queue is empty')
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        if self.is_empty():                 #special case as Queue is empty
            self._tail = None
        return answer

    def enqueue(self,e):
        newest = self._Node(e,None)         #Node will be new tail Node
        if self.is_empty():
            self._head = newest             #previously empty
        else:
            self._tail._next = newest
        self._tail = newest                 #Update reference to the tail node
        self._size += 1
        
