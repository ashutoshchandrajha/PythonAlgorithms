class Empty(Exception):
    pass

class _DoublyLinkedBase():
    #Base class providing doubly linked list representation
    class _Node():
        #non public class for storing a doubly linked node
        __slots__ = '_element','_prev','_next'
        def __init__(self,element,prev,next):
            self._element=element
            self._prev=prev
            self._next=next

    def __init__(self):
        #Create an empty list
        self._header = self._Node(None,None,None)
        self._trailer = self._Node(None,None,None)
        self._header._next=self._trailer            #trailer is after header
        self._trailer._prev=self._header            #header is before trailer
        self._size = 0

    def __len__(self):
        return self._size

    def is_empty(self):
        return self._size==0

    def _insert_between(self,e,predecessor,successor):
        #add element between two existing node and return new node
        newest = self._Node(e,predecessor,successor)    #linked to neighbors
        predecessor._next=newest
        successor._prev=newest
        self._size+=1
        return newest

    def _delete_node(self,node):
        predecessor = node._prev
        successor = node._next
        predecessor._next=successor
        successor._prev=predecessor
        self._size-=1
        element = node._element                         #record deleted element
        node._prev = node._next = node._element = None  #deprecate node
        return element                                  #return deleted element

class PositionalList(_DoublyLinkedBase):
    #Sequential container of elements allowing positional access

    #---------Nested Position class
    class Position():
        #abstraction representing the location of a single element
        def __init__(self,conatiner,node):
            #constructor should not be invoked by user
            self._container= conatiner
            self._node=node

        def element(self):
            return self._node._element

        def __eq__(self, other):
            #return true if other is a position representing the same location
            return type(other) is type(self) and other._node is self._node

        def __ne__(self, other):
            #return true if other does not represent the same location
            return not (self==other)                #opposite of __eq__

    #-----------utility method

    def _validate(self,p):
        #return position's node or raise error
        if not isinstance(p,self.Position):
            raise TypeError('p must be proper position type')
        if p._container is not self:
            raise ValueError('p does not belong to this container')
        if p._node._next is None:       #convention for deprecated nodes
            raise ValueError('p is no longer valid')
        return p._node

    def _make_position(self,node):
        #return position instance for given node or None if Sentinel
        if node is self._header or node is self._trailer:
            return None                                     #boundary violation
        else:
            return self.Position(self,node)                 #legitimate position

    #-----------accessors

    def first(self):
        return self._make_position(self._header._next)

    def last(self):
        return self._make_position(self._trailer._prev)

    def before(self,p):
        node=self._validate(p)
        return self._make_position(node._prev)

    def after(self,p):
        node=self._validate(p)
        return self._make_position(node._next)

    def __iter__(self):
        #generate a forward iteration of the elements of the list
        cursor = self.first()
        while cursor is not None:
            yield cursor.element()
            cursor=self.after(cursor)

    #----------mutators
    #override inherited version to return position, rather than Node
    def _insert_between(self,e,predecessor,successor):
        #add element between existing nodes and return new position
        node = super()._insert_between(e,predecessor,successor)
        return self._make_position(node)

    def add_first(self,e):
        return self._insert_between(e,self._header,self._header._next)

    def add_last(self,e):
        return self._insert_between(e,self._trailer._prev,self._trailer)

    def add_before(self,p,e):
        original = self._validate(p)
        return self._insert_between(e,original._prev,original)

    def add_after(self,p,e):
        original = self._validate(p)
        return self._insert_between(e,original,original._next)

    def delete(self,p):
        original = self._validate(p)
        return self._delete_node(original)

    def replace(self,p,e):
        original = self._validate(p)
        old_value = original._element
        original._element = e
        return old_value

class PriorityQueueBase():
    #Abstract base class for a priority Queue
    class _item():
        __slots__ = '_key','_value'
        def __init__(self,k,v):
            self._key = k
            self._value = v

    def __lt__(self, other):
        return self._key < self.other           #compare item based on their key

    def is_empty(self):                         #concrete method assuming abstract len
        return len(self)==0


class UnsortedPriorityQueue(PriorityQueueBase): #Base class defines item
    #minimum oriented priority queue implemented with an unsorted list

    def _find_min(self):
        #return position of item with minimum key
        if self.is_empty():
            raise Empty('Priority Queue is empty')
        small = self._data.first()
        walk = self._data.after(small)
        while walk is not None:
            if walk.element() < small.element():
                small = walk
            walk = self._data.after(walk)
        return small

    def __init__(self):
        #create an empty priority queue
        self._data = PositionalList()

    def __len__(self):
        return len(self._data)

    def add(self,key,value):
        self._data.add_last(self._item(key,value))

    def min(self):
        #return but do not remove (k, v) wiht minimum key
        p = self._find_min()
        item = p.element()
        return (item._key, item._value)

    def remove_min(self):
        #remove and return (k, v) tuple with minimum key
        p = self._find_min()
        item = self._data.delete(p)
        return (item._key, item._value)

class SortedPriorityQueue(PriorityQueueBase):
    def __init__(self):
        self._data = PositionalList()

    def __len__(self):
        return len(self._data)

    def add(self, key, value):
        newest = self._item(key,value)
        walk = self._data.last()
        while walk is not None and newest<walk.element():
            walk = self._data.before(walk)
        if walk is None:
            self._data.add_first(newest)
        else:
            self._data.after(walk,newest)

    def min(self):
        if self.is_empty():
            raise Empty('Priority queue is empty')
        p = self._data.first()
        item = p.element()
        return (item._key,item._value)

    def remove_min(self):
        if self.is_empty():
            raise Empty('Priority queue is empty')
        item = self._data.delete(self._data.first())
        return (item._key, item._value)
