# This module will double the list size when the list gets full and you need to append moer items

"""
Important thing to note :- Array size here is increasing in Geometric progression, which makes append operations 
of the order of O(n). If array was increasing in Arithmetic progression, resize events will happen more often, 
which will make it of the order of O(n^2)
"""

import ctypes

class DynamicArray():
    #Dynamic array class similar to the Python list

    def __init__(self):
        #Create an empty array
        self._n = 0                                     #count actual elements
        self._capacity = 4                              #default array capacity
        self._A = self._make_array(self._capacity)      #low-level capacity

    def __len__(self):
        #Return number of elements stored in the array
        return self._n

    def __getitem__(self, k):
        #Return element at index K
        if not 0 <= k < self._n:
            raise IndexError('invalid index')
        return self._A[k]                               #retrieve from array

    def append(self, obj):
        #Add object to end of the array
        if self._n == self._capacity:                   #check if not enough room
            self._resize(2*self._capacity)              #double capacity
        self._A[self._n] = obj
        self._n += 1

    def _resize(self, c):                               #non public utility
        #Resize internal array to capacity c
        B = self._make_array(c)                         #new bigger array
        for k in range(self._n):
            B[k] = self._A[k]
        self._A = B                                     #Use the bigger array
        self._capacity = c

    def _make_array(self, c):                           #non public utility
        #Return new array with capacity c
        return (c*ctypes.py_object)()

    def insert (self, k ,value):
        #Insert value at index K, shifting following values rightward
        if 0 <= k < self._n:
            if self._n == self._capacity:                   #check if not enough room
                self._resize(2*self._capacity)              #double capacity
            for j in range(self._n,k,-1):                   #shift rightmost element first
                self._A[j] = self._A[j-1]
            self._A[k] = value                              #store new element
            self._n += 1
        else:
            raise IndexError('invalid index')

    def remove(self, value):
        #Remove first occurence of value (or raise ValueError)
        for k in range(self._n):
            if self._A[k] == value:                         #match found
                for j in range(k,self._n - 1):              #left shift
                    self._A[j] = self._A[j+1]
                self._A[self._n - 1] = None                 #garbage collection
                self._n -= 1                                #decrease length by
                if self._n < self._capacity//2:              #reduce capacity
                    self._resize(self._capacity//2)
                return
        raise ValueError('value not found')


x = DynamicArray()
x.append(6)
x.append(9)
x.append(6)
x.append(6)
x.append(6)
x.append(9)
x.append(6)
x.append(6)
x.append(0)
x.append(5)
x.append(4)

#Right now the capacity = 16

x.remove(6)
x.remove(6)
x.remove(6)
x.remove(6)

#Right now the capacity = 8

x.insert(2,3)

for i in range(x._n):
    print(x[i])

print ("Capacity =",x._capacity)
