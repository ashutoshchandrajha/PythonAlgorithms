class EulerTour():
    #abstract base class for performing Euler tour of a tree

    def __init__(self,tree):
        #prepare a Euler tour template for a given tree
        self._tree=tree

    def tree(self):
        #return reference of a tree being traversed
        return self._tree

    def execute(self):
        #perform tour and return any result from post visit of root
        if len(self._tree)>0:
            return self._tour(self._tree.root(),0,[])   #start recursion

    def _tour(self,p,d,path):
        """
        perform tour of subtree rooted at position p
        p       Position of current node being visited
        d       depth of p in tree
        path    list of indices of children on path from root to p
        """
        self._hook_previsit(p,d,path)   #previsit p
        results=[]
        path.append(0)                  #add new index to the end of path before recursion
        for c in self._tree.children(p):
            results.append(self._tour(c,d+1,path))  #recur on child's subtree
            path[-1]+=1                 #increment index
        path.pop()
        answer = self._hook_postvisit(p,d,path,results)     #postvisit p
        return answer

    def _hook_previsit(self,p,d,path):                      #can be overriden
        pass

    def _hook_postvisit(self,p,d,path,results):             #can be overriden
        pass
